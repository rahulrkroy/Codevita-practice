1
Single Lane Highway
Problem Description
Certain number of cars are passing a single lane road. Speeds of all cars vary. It is easy to see, that depending on the speeds of the cars various groups will be formed.

Being a single lane road passing/overtaking is not allowed. Given speeds of cars, calculate how many groups can be formed if all possible permutations are taken into account. Refer example1 for better understanding.

Print number of groups divided by the number of permutations.

Constraints
0 <= N < 10 ^ 5

0 <= speed of individual vehicle < 10 ^ 9

Input
First line contains an integer N, which denotes the number of vehicles

Second line contains N space separated integers which denotes the speed of individual vehicle.

Output
Print number of groups divided by the number of permutations rounded upto 6 decimal places.

Time Limit
1

Examples
Example 1

Input

3

10 20 30

Output

1.833333

Explanation:

So all possible permutations are:

{10 20 30}

{10 30 20}

{20} {10 30}

{20 30} {10}

{30} {10 20}

{30 20} {10}

So here there are total 6 permutations, and total number of groups are 11.

So, output is 11/6 = 1.833333


Example 2

Input

4

56 78 13 92

Output

2.083333

Explanation:

So here there are total 24 permutations,

For example:

{56 78 13 92}

{92} {13 78 56}

{56} {13 92 78}

{78 92} {13 56}

.

.

So on and so forth. The total number of groups are 50.

So, the output is 50/24 = 2.083333




2
Binary Equivalent
Problem Description
Mr. Binary is lost and wants to be found but the problem is he understands only binary. His house is located at a maximum binary equivalence possible, from the given set of numbers. A set is a binary equivalence if the number of 0 zeros and ones from a set of number are equal.

Constraints
1 <= N <= 20

1 <= Arr[i] <= 10^5, where Arr[i] is the ith element in the set of N numbers in second line of input

Arr[i] will be unique

Input
First line contains N denoting the number of decimal numbers

Next line contains N space separated decimal numbers

Output
Single line output printing possible binary equivalence where number of digits in this number is equal to number of bits present in the largest element in second line of input. If there is no set which has binary equivalence then return 0 padded to number of bits present in the largest element in second line of input.

Time Limit
1


Examples
Example 1

Input

3

2 7 10

Output

0011

Explanation

2 -> 0010 - 1's = 1, 0's = 3

7 -> 0111 - 1's = 3, 0's = 1

10 -> 1010 - 1's = 2, 0's = 2

Here we have taken up to 4 bits because the maximum number is 10 which needs 4 bits to be represented in binary. The number of zeroes and ones across the set is, 6 each. Hence, the set of [2,7,10] has binary equivalence. Similarly, if you consider set[2,7], it also has binary equivalence, 4 each. But set [7,10] does not have binary equivalence. Likewise, set[10] has binary equivalence of 2 each.

Total number of unique sets where binary equivalence is possible from all combinations are 3 viz. Sets are [2,7,10], [2,7] and [10] which is the final answer. But as Mr. Binary only understands zeroes and ones, return the binary of 3.

Since 10 is the largest element in the input on line 2, the number of bits required to represent 10 in binary is 4. Hence output needs to be padded upto 4 digits. Since binary of 3 represented as a 4-digit number is 0011, the answer is 0011

Note

Do not consider empty subset

Example 2

Input

1

7

Output

000

Explanation

7 -> 111 - 1's = 3, 0's = 1

Since there is only one element in the set and it also does not have binary equivalence, the answer is 0. However, keeping output specifications in mind, the answer should be printed as 000 since the highest element in second line of input viz. 7 has 3 bits when represented in binary format.







3
Unlocker
Problem Description
A locker is comprised of one or more layers. Each layer can be rotated only in one direction. Odd numbered layers rotate in anti-clockwise direction (left to right), and even numbered layers rotate in clockwise direction (right to left).

You are given a locker, in the form of a matrix. The matrix will be rectangular in shape. The outer most layer of this matrix is layer1. In context of the diagram below, the numbers painted in red are layer1 and the inner numbers constitute layer2. Bigger matrices will have more layers.

One rotation defined as a given number moving in the neighbouring spot i.e. one spot left for clockwise rotation and one spot right for anti-clockwise rotation.

Number of rotations for each layer required to unlock the locker will be provided as input. Print the final unlocked matrix as output.

com.tcs.cv.automata.ei.middleware.DocxToHtmlConverter@134a2ab9:image1.png

com.tcs.cv.automata.ei.middleware.DocxToHtmlConverter@134a2ab9:image2.png

Constraints
1 < M, N <= 300

0 <= Numbers in matrix < 100

1 <= Number of rotations <= 10^9

M%2=0 && N%2=0

Input
First line contains two space separated integer M and N which denotes the number of rows and number of columns, respectively

Next M lines contain N space separated integers depicting the locked matrix

Last line contains L space separated integers, where L is the number of layers. Each number on this line denotes the number of rotations for every layer from 1 to L

Output
Print unlocked matrix

Time Limit
2

Examples
Example 1

Input

2 2

1 2

3 4

2

Output

4 3

2 1

Explanation:

There is only one layer. So, we have to rotate it in anti-clockwise direction with 2 rotations.

com.tcs.cv.automata.ei.middleware.DocxToHtmlConverter@134a2ab9:image3.png

Example 2

Input

4 4

1 2 3 4

2 3 4 5

2 4 5 6

2 3 4 5

2 2

Output

3 4 5 6

2 5 4 5

1 4 3 4

2 2 2 3

Explanation:

Here we have to rotate layer1 in anti-clockwise direction with 2 rotations, and layer2 clockwise with 2 rotations.

com.tcs.cv.automata.ei.middleware.DocxToHtmlConverter@134a2ab9:image4.png







4.
String Pair
Problem Description
One person hands over the list of digits to Mr. String, But Mr. String understands only strings. Within strings also he understands only vowels. Mr. String needs your help to find the total number of pairs which add up to a certain digit D.

The rules to calculate digit D are as follow

Take all digits and convert them into their textual representation

Next, sum up the number of vowels i.e. {a, e, i, o, u} from all textual representation

This sum is digit D

Now, once digit D is known find out all unordered pairs of numbers in input whose sum is equal to D. Refer example section for better understanding.

Constraints
1 <= N <= 100

1 <= value of each element in second line of input <= 100

Number 100, if and when it appears in input should be converted to textual representation as hundred and not as one hundred. Hence number of vowels in number 100 should be 2 and not 4

Input
First line contains an integer N which represents number of elements to be processed as input

Second line contains N numbers separated by space

Output
Lower case representation of textual representation of number of pairs in input that sum up to digit D

Note: - (If the count exceeds 100 print "greater 100")

Time Limit
1


Examples
Example 1

Input

5

1 2 3 4 5

Output

one

Explanation

1 -> one -> o, e

2 -> two -> o

3 -> three -> e, e

4 -> four -> o, u

5 -> five - > i, e

Thus, count of vowels in textual representation of numbers in input = {2 + 1 + 2 + 2 + 2} = 9. Number 9 is the digit D referred to in section above.

Now from given list of number {1,2,3,4,5} -> find all pairs that sum up to 9.

Upon processing this we know that only a single unordered pair {4, 5} sum up to 9. Hence the answer is 1. However, output specification requires you to print textual representation of number 1 which is one. Hence output is one.

Note: - Pairs {4, 5} or {5, 4} both sum up to 9. But since we are asking to count only unordered pair, the number of unordered pair is this combination is only one.

Example 2

Input

3

7 4 2

Output

zero

Explanation

7 -> seven -> e, e

4 -> four -> o, u

2 -> two -> o

Thus, count of vowels in textual representation of numbers in input = {2 + 2 + 1} = 5. Number 5 is the digit D referred to in section above.

Since no pairs add up to 5, the answer is 0. Textual representation of 0 is zero. Hence output is zero.








5
Tennis Score
Problem Description
A game of tennis (singles) is played. Regions of the court are named as shown in the image.

The running score of each game is described in the manner: "0", "15", "30", and "40". If at least three points have been scored by each side and a player has one more point than his opponent, the score of the game is advantage ("Advantage") for the player in the lead. (source: Wikipedia)

A set consists of a sequence of games played with service alternating between games, ending when a player wins a set by winning at least six games and at least two games more than the opponent. If one player has won six games and the opponent five, an additional game is played. If the leading player wins that game, the player wins the set 7-5. If the trailing player wins the game (tying the set 6-6) a tie-break is played. A tie-break, allows one player to win one more game and thus the set, to give a final set score of 7-6 or 6-7.(source: Wikipedia)

com.tcs.cv.automata.ei.middleware.DocxToHtmlConverter@38cf8ddc:image1.jpeg
Aim is to toss the ball on the green part of the other side of the court. A set of strings will be provided signifying where the tennis ball has been tossed on the court. Assume that no player will hit the ball directly (i.e. without the ball being tossed on his (green) side of the court). 

For Example, a string Q4 Q1 Q3 O1 will mean that server serves and the ball hits the area Q4. Receiver returns and ball hits ground in area Q1, server hits back again to area Q3 and then the receiver hits 'long' to area O1 and loses a point. So the set output is 0-0 and the current game output will be 15-0.

Following are the rules of the game:

Game always starts with Server on H1 side (lower side in the image)

Serve changes after every game is won

On 'Serve' ball should hit on any 'Q' part of the other side. Hitting on 'H' part will be considered a fault

While serving, if the server makes a double fault (ball should fall on his side or outside region twice), the server loses one point

Points scored by the current server are mentioned first, for example if server wins the first point score will be 15-0

At the end of a set, a changeover happens i.e. players change sides of the court.

In case of game score 40-40, display "Deuce". In case of Server's Advantage, display "Advantage Server".

In case of Receiver's Advantage, display "Advantage Receiver"

Number of sets played may not exceed 5

In case a set is complete a set score of 7-5 will be denoted as:

7 0 (first player set score)

5 0 (second player set score)

Since the second set is about to start, a score of 0 0 is displayed. Please read these scores vertically.

When a new game is about to start, display 0 - 0 for new game. For example:

0 0 (current game score)

Departure from Tennis rule:

In real game of tennis a server is required to serve cross court. However, in this problem the server can serve in any court {Q3, Q4} for server 1 and {Q1, Q2} for server 2
In real game of tennis a tie-break is counted in scores of 1, 2, 3, 4 instead of 15, 30, 40 etc. However, in this problem a tie-break is won according to regular rule i.e. by scoring points like in a regular game. For example, lets say the score is 6-6. In regular tennis a tie break would follow, but in this problem the 13th game will be played and scored using the same rules applied for first 12 games. Whoever wins the 13th game, wins the set i.e. either 7-6 or 6-7

In a real game of tennis, a changeover (players switching court sides) happens at the end of a set or after the first game is played in a new set. However, in this problem changeover happens at the end of the set

Constraints
Number of space separated strings in input < 500

Input
One line containing a string representing the sequence where the ball drops, separated by space

Output
First line containing the set score of all the sets of the Server (starting from first and separated by space)

Second line containing the set score of all the sets of the Receiver (starting from first and separated by space)

Third line containing the game score of the current game (separated by space) or "Deuce" or "Advantage Receiver" or "Advantage Server", as may be the case.

Time Limit
1


Examples
Example 1

Input 

Q1 Q1

Output

0
0
0 15

Explanation

Server serves and ball hits area Q1. He will not lose point because he is serving. Again he serves and ball hits area Q1. Since, this is a double fault he loses one point. Hence the game score is 0-15.

Example 2

Input

Q1 Q1 Q3 Q3 Q1 Q1 Q3 Q3 Q1 Q1 Q3 Q3

Output

0
0
Deuce

Explanation

· String Q1 Q1 indicates a double fault. The score becomes 0-15

· Next String Q3 indicates a valid serve. The second Q3 indicates that the Receiver could not return the serve because it fell into his own half. This makes the score 15-15.

· Similar sequence repeats for two more times, making the score 30-30, then 40-40 which is Deuce.

Example 3

Input

Q1 Q1 Q2 Q3 O1 H2 H2 Q1 Q1 Q1 Q2

Output

1
0
0 0

Explanation

· Except points Q2 Q3 O1 all other string indicates a double fault on part of the server

· Q2 Q3 O1 earns the server one point

· Overall the server loses the game

· Now a new game begins and the current server becomes receiver and vice versa

· The score is printed after the new game begins and the score is 0 0. Hence, server score is 1 whereas the receiver score is 0







6.
Secret Word
Problem Description
A computer scientist has developed an encryption algorithm. This algorithm takes two inputs - one plain word and another, a key. Characteristics of inputs are as below.

Plain word: It is a string consisting of lowercase alphabets only.

Key: It is a set of pairs of strings consisting of lowercase alphabets only. For each pair, first string is the plain word and second string is its secret word. The characters of these secret words are jumbled but lengths of Plain Word and Secret Word are equal.

This algorithm finds the secret characters for each character in the inputted plain word by using the key. Then it combines all the secret characters in the same order to form a string called the secret word. Finally output this secret word. Below table shows how secret characters can be obtained from the key.

Examples

com.tcs.cv.automata.ei.middleware.DocxToHtmlConverter@1acddf9c:image1.png

Your task is to help him in implementing the algorithm as a computer program.

Note: It is guaranteed that all characters in the given plain word can be converted to secret characters by using the given key.

Note: It is guaranteed that one plain text can be converted to only one encrypted text.

Constraints
1 <= P <= 52000

1 <= N <= 26

1 <= Length of a plain word in pair <= 50000

1 <= Length of a secret word in pair <= 50000

Length (plain word) == Length (secret word)

Input
First line contains string P denoting the plain text.

Second line contains an integer N denoting number of key pairs.

Next N lines, each contain two space separated strings denoting plain text and key.

Output
Print the encrypted word.

Time Limit
1


Examples
Example 1

Input

load

3

app lol

old tip

odd itt

Output

piot

Explanation

"load" is the plain word to be encrypted. Given Key contains 3 pairs of Plain word and Secret word combination. They are <"app", "lol">, <"old", "tip"> and <"odd", "itt">. From first pair, it's clear that the secret character of 'p' is 'l' and that of 'a' is 'o'. From third pair, it's clear that the secret character of 'd' is 't' and that of 'o' is 'i'. By using above findings, from second pair, it is clear that the secret character of 'l' is 'p'. Now we can build the secret word by replacing the characters of plain word by its corresponding secret characters as "piot".

Example 2

Input

a

1

a b

Output

b

Explanation

The word "a" is the plain word to be converted to secret word. The given key consists of only one plain word - secret word pair. i.e., <"a", "b">. From this, it is clear that the secret character of 'a' is 'b', since there is only one character in both secret and plain words. So, the final output is "b".






